{"ast":null,"code":"// import React, {useEffect,useRef,useState,useCallback} from \"react\"\n\n// const IsDevice = (() => {\n//     if (typeof navigator == 'undefined') return\n\n//     let ua = navigator.userAgent\n\n//     return {\n//       info: ua,\n\n//       Android() {\n//         return ua.match(/Android/i)\n//       },\n//       BlackBerry() {\n//         return ua.match(/BlackBerry/i)\n//       },\n//       IEMobile() {\n//         return ua.match(/IEMobile/i)\n//       },\n//       iOS() {\n//         return ua.match(/iPhone|iPad|iPod/i)\n//       },\n//       iPad() {\n//         return (\n//           ua.match(/Mac/) &&\n//           navigator.maxTouchPoints &&\n//           navigator.maxTouchPoints > 2\n//         )\n//       },\n//       OperaMini() {\n//         return ua.match(/Opera Mini/i)\n//       },\n\n//       /**\n//        * Any Device\n//        */\n//       any() {\n//         return (\n//           IsDevice.Android() ||\n//           IsDevice.BlackBerry() ||\n//           IsDevice.iOS() ||\n//           IsDevice.iPad() ||\n//           IsDevice.OperaMini() ||\n//           IsDevice.IEMobile()\n//         )\n//       }\n//     }\n//   })()\n\n// function useEventListener(eventName, handler, element = document) {\n//     const savedHandler = useRef()\n\n//     useEffect(() => {\n//       savedHandler.current = handler\n//     }, [handler])\n\n//     useEffect(() => {\n//       const isSupported = element && element.addEventListener\n//       if (!isSupported) return\n\n//       const eventListener = (event) => savedHandler.current(event)\n\n//       element.addEventListener(eventName, eventListener)\n\n//       return () => {\n//         element.removeEventListener(eventName, eventListener)\n//       }\n//     }, [eventName, element])\n//   }\n\n//   /**\n//  * Cursor Core\n//  * Replaces the native cursor with a custom animated cursor, consisting\n//  * of an inner and outer dot that scale inversely based on hover or click.\n//  *\n//  * @author Stephen Scaff (github.com/stephenscaff)\n//  *\n//  * @param {string} color - rgb color value\n//  * @param {number} outerAlpha - level of alpha transparency for color\n//  * @param {number} innerSize - inner cursor size in px\n//  * @param {number} innerScale - inner cursor scale amount\n//  * @param {number} outerSize - outer cursor size in px\n//  * @param {number} outerScale - outer cursor scale amount\n//  * @param {object} outerStyle - style object for outer cursor\n//  * @param {object} innerStyle - style object for inner cursor\n//  * @param {array}  clickables - array of clickable selectors\n//  *\n//  */\n// function CursorCore({\n//     outerStyle,\n//     innerStyle,\n//     color = '220, 90, 90',\n//     outerAlpha = 0.3,\n//     innerSize = 8,\n//     outerSize = 8,\n//     outerScale = 6,\n//     innerScale = 0.6,\n//     trailingSpeed = 8,\n//     clickables = [\n//       'a',\n//       'input[type=\"text\"]',\n//       'input[type=\"email\"]',\n//       'input[type=\"number\"]',\n//       'input[type=\"submit\"]',\n//       'input[type=\"image\"]',\n//       'label[for]',\n//       'select',\n//       'textarea',\n//       'button',\n//       '.link'\n//     ]\n//   }) {\n//     const cursorOuterRef = useRef()\n//     const cursorInnerRef = useRef()\n//     const requestRef = useRef()\n//     const previousTimeRef = useRef()\n//     const [coords, setCoords] = useState({ x: 0, y: 0 })\n//     const [isVisible, setIsVisible] = useState(false)\n//     const [isActive, setIsActive] = useState(false)\n//     const [isActiveClickable, setIsActiveClickable] = useState(false)\n//     let endX = useRef(0)\n//     let endY = useRef(0)\n\n//     /**\n//      * Primary Mouse move event\n//      * @param {number} clientX - MouseEvent.clientx\n//      * @param {number} clientY - MouseEvent.clienty\n//      */\n//     const onMouseMove = useCallback(({ clientX, clientY }) => {\n//       setCoords({ x: clientX, y: clientY })\n//       cursorInnerRef.current.style.top = `${clientY}px`\n//       cursorInnerRef.current.style.left = `${clientX}px`\n//       endX.current = clientX\n//       endY.current = clientY\n//     }, [])\n\n//     // Outer Cursor Animation Delay\n//     const animateOuterCursor = useCallback(\n//       (time) => {\n//         if (previousTimeRef.current !== undefined) {\n//           coords.x += (endX.current - coords.x) / trailingSpeed\n//           coords.y += (endY.current - coords.y) / trailingSpeed\n//           cursorOuterRef.current.style.top = `${coords.y}px`\n//           cursorOuterRef.current.style.left = `${coords.x}px`\n//         }\n//         previousTimeRef.current = time\n//         requestRef.current = requestAnimationFrame(animateOuterCursor)\n//       },\n//       [requestRef] // eslint-disable-line\n//     )\n\n//     // RAF for animateOuterCursor\n//     useEffect(() => {\n//       requestRef.current = requestAnimationFrame(animateOuterCursor)\n//       return () => cancelAnimationFrame(requestRef.current)\n//     }, [animateOuterCursor])\n\n//     // Mouse Events State updates\n//     const onMouseDown = useCallback(() => setIsActive(true), [])\n//     const onMouseUp = useCallback(() => setIsActive(false), [])\n//     const onMouseEnterViewport = useCallback(() => setIsVisible(true), [])\n//     const onMouseLeaveViewport = useCallback(() => setIsVisible(false), [])\n\n//     useEventListener('mousemove', onMouseMove)\n//     useEventListener('mousedown', onMouseDown)\n//     useEventListener('mouseup', onMouseUp)\n//     useEventListener('mouseover', onMouseEnterViewport)\n//     useEventListener('mouseout', onMouseLeaveViewport)\n\n//     // Cursors Hover/Active State\n//     useEffect(() => {\n//       if (isActive) {\n//         cursorInnerRef.current.style.transform = `translate(-50%, -50%) scale(${innerScale})`\n//         cursorOuterRef.current.style.transform = `translate(-50%, -50%) scale(${outerScale})`\n//       } else {\n//         cursorInnerRef.current.style.transform = 'translate(-50%, -50%) scale(1)'\n//         cursorOuterRef.current.style.transform = 'translate(-50%, -50%) scale(1)'\n//       }\n//     }, [innerScale, outerScale, isActive])\n\n//     // Cursors Click States\n//     useEffect(() => {\n//       if (isActiveClickable) {\n//         cursorInnerRef.current.style.transform = `translate(-50%, -50%) scale(${\n//           innerScale * 1.2\n//         })`\n//         cursorOuterRef.current.style.transform = `translate(-50%, -50%) scale(${\n//           outerScale * 1.4\n//         })`\n//       }\n//     }, [innerScale, outerScale, isActiveClickable])\n\n//     // Cursor Visibility State\n//     useEffect(() => {\n//       if (isVisible) {\n//         cursorInnerRef.current.style.opacity = 1\n//         cursorOuterRef.current.style.opacity = 1\n//       } else {\n//         cursorInnerRef.current.style.opacity = 0\n//         cursorOuterRef.current.style.opacity = 0\n//       }\n//     }, [isVisible])\n\n//     useEffect(() => {\n//       const clickableEls = document.querySelectorAll(clickables.join(','))\n\n//       clickableEls.forEach((el) => {\n//         el.style.cursor = 'none'\n\n//         el.addEventListener('mouseover', () => {\n//           setIsActive(true)\n//         })\n//         el.addEventListener('click', () => {\n//           setIsActive(true)\n//           setIsActiveClickable(false)\n//         })\n//         el.addEventListener('mousedown', () => {\n//           setIsActiveClickable(true)\n//         })\n//         el.addEventListener('mouseup', () => {\n//           setIsActive(true)\n//         })\n//         el.addEventListener('mouseout', () => {\n//           setIsActive(false)\n//           setIsActiveClickable(false)\n//         })\n//       })\n\n//       return () => {\n//         clickableEls.forEach((el) => {\n//           el.removeEventListener('mouseover', () => {\n//             setIsActive(true)\n//           })\n//           el.removeEventListener('click', () => {\n//             setIsActive(true)\n//             setIsActiveClickable(false)\n//           })\n//           el.removeEventListener('mousedown', () => {\n//             setIsActiveClickable(true)\n//           })\n//           el.removeEventListener('mouseup', () => {\n//             setIsActive(true)\n//           })\n//           el.removeEventListener('mouseout', () => {\n//             setIsActive(false)\n//             setIsActiveClickable(false)\n//           })\n//         })\n//       }\n//     }, [isActive, clickables])\n\n//     // Cursor Styles\n//     const styles = {\n//       cursorInner: {\n//         zIndex: 999,\n//         display: 'block',\n//         position: 'fixed',\n//         borderRadius: '50%',\n//         width: innerSize,\n//         height: innerSize,\n//         pointerEvents: 'none',\n//         backgroundColor: `rgba(${color}, 1)`,\n//         ...(innerStyle && innerStyle),\n//         transition: 'opacity 0.15s ease-in-out, transform 0.25s ease-in-out'\n//       },\n//       cursorOuter: {\n//         zIndex: 999,\n//         display: 'block',\n//         position: 'fixed',\n//         borderRadius: '50%',\n//         pointerEvents: 'none',\n//         width: outerSize,\n//         height: outerSize,\n//         backgroundColor: `rgba(${color}, ${outerAlpha})`,\n//         transition: 'opacity 0.15s ease-in-out, transform 0.15s ease-in-out',\n//         willChange: 'transform',\n//         ...(outerStyle && outerStyle)\n//       }\n//     }\n\n//     // Hide / Show global cursor\n//     document.body.style.cursor = 'none'\n\n//     return (\n//       <React.Fragment>\n//         <div ref={cursorOuterRef} style={styles.cursorOuter} />\n//         <div ref={cursorInnerRef} style={styles.cursorInner} />\n//       </React.Fragment>\n//     )\n//   }\n\n//   /**\n//    * AnimatedCursor\n//    * Calls and passes props to CursorCore if not a touch/mobile device.\n//    */\n//   function AnimatedCursor({\n//     outerStyle,\n//     innerStyle,\n//     color,\n//     outerAlpha,\n//     innerSize,\n//     innerScale,\n//     outerSize,\n//     outerScale,\n//     trailingSpeed,\n//     clickables\n//   }) {\n//     if (typeof navigator !== 'undefined' && IsDevice.any()) {\n//       return <React.Fragment></React.Fragment>\n//     }\n//     return (\n//       <CursorCore\n//         outerStyle={outerStyle}\n//         innerStyle={innerStyle}\n//         color={color}\n//         outerAlpha={outerAlpha}\n//         innerSize={innerSize}\n//         innerScale={innerScale}\n//         outerSize={outerSize}\n//         outerScale={outerScale}\n//         trailingSpeed={trailingSpeed}\n//         clickables={clickables}\n//       />\n//     )\n//   }\n\n// export default AnimatedCursor","map":{"version":3,"names":[],"sources":["/Users/viktorijadeksne/Downloads/react-portfolio-master/src/hooks/AnimatedCursor.js"],"sourcesContent":["// import React, {useEffect,useRef,useState,useCallback} from \"react\"\n\n// const IsDevice = (() => {\n//     if (typeof navigator == 'undefined') return\n  \n//     let ua = navigator.userAgent\n  \n//     return {\n//       info: ua,\n  \n//       Android() {\n//         return ua.match(/Android/i)\n//       },\n//       BlackBerry() {\n//         return ua.match(/BlackBerry/i)\n//       },\n//       IEMobile() {\n//         return ua.match(/IEMobile/i)\n//       },\n//       iOS() {\n//         return ua.match(/iPhone|iPad|iPod/i)\n//       },\n//       iPad() {\n//         return (\n//           ua.match(/Mac/) &&\n//           navigator.maxTouchPoints &&\n//           navigator.maxTouchPoints > 2\n//         )\n//       },\n//       OperaMini() {\n//         return ua.match(/Opera Mini/i)\n//       },\n  \n//       /**\n//        * Any Device\n//        */\n//       any() {\n//         return (\n//           IsDevice.Android() ||\n//           IsDevice.BlackBerry() ||\n//           IsDevice.iOS() ||\n//           IsDevice.iPad() ||\n//           IsDevice.OperaMini() ||\n//           IsDevice.IEMobile()\n//         )\n//       }\n//     }\n//   })()\n\n\n// function useEventListener(eventName, handler, element = document) {\n//     const savedHandler = useRef()\n  \n//     useEffect(() => {\n//       savedHandler.current = handler\n//     }, [handler])\n  \n//     useEffect(() => {\n//       const isSupported = element && element.addEventListener\n//       if (!isSupported) return\n  \n//       const eventListener = (event) => savedHandler.current(event)\n  \n//       element.addEventListener(eventName, eventListener)\n  \n//       return () => {\n//         element.removeEventListener(eventName, eventListener)\n//       }\n//     }, [eventName, element])\n//   }\n  \n//   /**\n//  * Cursor Core\n//  * Replaces the native cursor with a custom animated cursor, consisting\n//  * of an inner and outer dot that scale inversely based on hover or click.\n//  *\n//  * @author Stephen Scaff (github.com/stephenscaff)\n//  *\n//  * @param {string} color - rgb color value\n//  * @param {number} outerAlpha - level of alpha transparency for color\n//  * @param {number} innerSize - inner cursor size in px\n//  * @param {number} innerScale - inner cursor scale amount\n//  * @param {number} outerSize - outer cursor size in px\n//  * @param {number} outerScale - outer cursor scale amount\n//  * @param {object} outerStyle - style object for outer cursor\n//  * @param {object} innerStyle - style object for inner cursor\n//  * @param {array}  clickables - array of clickable selectors\n//  *\n//  */\n// function CursorCore({\n//     outerStyle,\n//     innerStyle,\n//     color = '220, 90, 90',\n//     outerAlpha = 0.3,\n//     innerSize = 8,\n//     outerSize = 8,\n//     outerScale = 6,\n//     innerScale = 0.6,\n//     trailingSpeed = 8,\n//     clickables = [\n//       'a',\n//       'input[type=\"text\"]',\n//       'input[type=\"email\"]',\n//       'input[type=\"number\"]',\n//       'input[type=\"submit\"]',\n//       'input[type=\"image\"]',\n//       'label[for]',\n//       'select',\n//       'textarea',\n//       'button',\n//       '.link'\n//     ]\n//   }) {\n//     const cursorOuterRef = useRef()\n//     const cursorInnerRef = useRef()\n//     const requestRef = useRef()\n//     const previousTimeRef = useRef()\n//     const [coords, setCoords] = useState({ x: 0, y: 0 })\n//     const [isVisible, setIsVisible] = useState(false)\n//     const [isActive, setIsActive] = useState(false)\n//     const [isActiveClickable, setIsActiveClickable] = useState(false)\n//     let endX = useRef(0)\n//     let endY = useRef(0)\n  \n//     /**\n//      * Primary Mouse move event\n//      * @param {number} clientX - MouseEvent.clientx\n//      * @param {number} clientY - MouseEvent.clienty\n//      */\n//     const onMouseMove = useCallback(({ clientX, clientY }) => {\n//       setCoords({ x: clientX, y: clientY })\n//       cursorInnerRef.current.style.top = `${clientY}px`\n//       cursorInnerRef.current.style.left = `${clientX}px`\n//       endX.current = clientX\n//       endY.current = clientY\n//     }, [])\n  \n//     // Outer Cursor Animation Delay\n//     const animateOuterCursor = useCallback(\n//       (time) => {\n//         if (previousTimeRef.current !== undefined) {\n//           coords.x += (endX.current - coords.x) / trailingSpeed\n//           coords.y += (endY.current - coords.y) / trailingSpeed\n//           cursorOuterRef.current.style.top = `${coords.y}px`\n//           cursorOuterRef.current.style.left = `${coords.x}px`\n//         }\n//         previousTimeRef.current = time\n//         requestRef.current = requestAnimationFrame(animateOuterCursor)\n//       },\n//       [requestRef] // eslint-disable-line\n//     )\n  \n//     // RAF for animateOuterCursor\n//     useEffect(() => {\n//       requestRef.current = requestAnimationFrame(animateOuterCursor)\n//       return () => cancelAnimationFrame(requestRef.current)\n//     }, [animateOuterCursor])\n  \n//     // Mouse Events State updates\n//     const onMouseDown = useCallback(() => setIsActive(true), [])\n//     const onMouseUp = useCallback(() => setIsActive(false), [])\n//     const onMouseEnterViewport = useCallback(() => setIsVisible(true), [])\n//     const onMouseLeaveViewport = useCallback(() => setIsVisible(false), [])\n  \n//     useEventListener('mousemove', onMouseMove)\n//     useEventListener('mousedown', onMouseDown)\n//     useEventListener('mouseup', onMouseUp)\n//     useEventListener('mouseover', onMouseEnterViewport)\n//     useEventListener('mouseout', onMouseLeaveViewport)\n  \n//     // Cursors Hover/Active State\n//     useEffect(() => {\n//       if (isActive) {\n//         cursorInnerRef.current.style.transform = `translate(-50%, -50%) scale(${innerScale})`\n//         cursorOuterRef.current.style.transform = `translate(-50%, -50%) scale(${outerScale})`\n//       } else {\n//         cursorInnerRef.current.style.transform = 'translate(-50%, -50%) scale(1)'\n//         cursorOuterRef.current.style.transform = 'translate(-50%, -50%) scale(1)'\n//       }\n//     }, [innerScale, outerScale, isActive])\n  \n//     // Cursors Click States\n//     useEffect(() => {\n//       if (isActiveClickable) {\n//         cursorInnerRef.current.style.transform = `translate(-50%, -50%) scale(${\n//           innerScale * 1.2\n//         })`\n//         cursorOuterRef.current.style.transform = `translate(-50%, -50%) scale(${\n//           outerScale * 1.4\n//         })`\n//       }\n//     }, [innerScale, outerScale, isActiveClickable])\n  \n//     // Cursor Visibility State\n//     useEffect(() => {\n//       if (isVisible) {\n//         cursorInnerRef.current.style.opacity = 1\n//         cursorOuterRef.current.style.opacity = 1\n//       } else {\n//         cursorInnerRef.current.style.opacity = 0\n//         cursorOuterRef.current.style.opacity = 0\n//       }\n//     }, [isVisible])\n  \n//     useEffect(() => {\n//       const clickableEls = document.querySelectorAll(clickables.join(','))\n  \n//       clickableEls.forEach((el) => {\n//         el.style.cursor = 'none'\n  \n//         el.addEventListener('mouseover', () => {\n//           setIsActive(true)\n//         })\n//         el.addEventListener('click', () => {\n//           setIsActive(true)\n//           setIsActiveClickable(false)\n//         })\n//         el.addEventListener('mousedown', () => {\n//           setIsActiveClickable(true)\n//         })\n//         el.addEventListener('mouseup', () => {\n//           setIsActive(true)\n//         })\n//         el.addEventListener('mouseout', () => {\n//           setIsActive(false)\n//           setIsActiveClickable(false)\n//         })\n//       })\n  \n//       return () => {\n//         clickableEls.forEach((el) => {\n//           el.removeEventListener('mouseover', () => {\n//             setIsActive(true)\n//           })\n//           el.removeEventListener('click', () => {\n//             setIsActive(true)\n//             setIsActiveClickable(false)\n//           })\n//           el.removeEventListener('mousedown', () => {\n//             setIsActiveClickable(true)\n//           })\n//           el.removeEventListener('mouseup', () => {\n//             setIsActive(true)\n//           })\n//           el.removeEventListener('mouseout', () => {\n//             setIsActive(false)\n//             setIsActiveClickable(false)\n//           })\n//         })\n//       }\n//     }, [isActive, clickables])\n  \n//     // Cursor Styles\n//     const styles = {\n//       cursorInner: {\n//         zIndex: 999,\n//         display: 'block',\n//         position: 'fixed',\n//         borderRadius: '50%',\n//         width: innerSize,\n//         height: innerSize,\n//         pointerEvents: 'none',\n//         backgroundColor: `rgba(${color}, 1)`,\n//         ...(innerStyle && innerStyle),\n//         transition: 'opacity 0.15s ease-in-out, transform 0.25s ease-in-out'\n//       },\n//       cursorOuter: {\n//         zIndex: 999,\n//         display: 'block',\n//         position: 'fixed',\n//         borderRadius: '50%',\n//         pointerEvents: 'none',\n//         width: outerSize,\n//         height: outerSize,\n//         backgroundColor: `rgba(${color}, ${outerAlpha})`,\n//         transition: 'opacity 0.15s ease-in-out, transform 0.15s ease-in-out',\n//         willChange: 'transform',\n//         ...(outerStyle && outerStyle)\n//       }\n//     }\n  \n//     // Hide / Show global cursor\n//     document.body.style.cursor = 'none'\n  \n//     return (\n//       <React.Fragment>\n//         <div ref={cursorOuterRef} style={styles.cursorOuter} />\n//         <div ref={cursorInnerRef} style={styles.cursorInner} />\n//       </React.Fragment>\n//     )\n//   }\n  \n//   /**\n//    * AnimatedCursor\n//    * Calls and passes props to CursorCore if not a touch/mobile device.\n//    */\n//   function AnimatedCursor({\n//     outerStyle,\n//     innerStyle,\n//     color,\n//     outerAlpha,\n//     innerSize,\n//     innerScale,\n//     outerSize,\n//     outerScale,\n//     trailingSpeed,\n//     clickables\n//   }) {\n//     if (typeof navigator !== 'undefined' && IsDevice.any()) {\n//       return <React.Fragment></React.Fragment>\n//     }\n//     return (\n//       <CursorCore\n//         outerStyle={outerStyle}\n//         innerStyle={innerStyle}\n//         color={color}\n//         outerAlpha={outerAlpha}\n//         innerSize={innerSize}\n//         innerScale={innerScale}\n//         outerSize={outerSize}\n//         outerScale={outerScale}\n//         trailingSpeed={trailingSpeed}\n//         clickables={clickables}\n//       />\n//     )\n//   }\n  \n \n// export default AnimatedCursor"],"mappings":"AAAA;;AAEA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAGA"},"metadata":{},"sourceType":"module","externalDependencies":[]}